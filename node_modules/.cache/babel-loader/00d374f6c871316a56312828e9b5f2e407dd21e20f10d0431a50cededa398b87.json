{"ast":null,"code":"var _jsxFileName = \"/home/antonio/repos/projectMemoryCardTOP/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [randomImages, setRandomImages] = useState([]);\n  const [clickedCards, setClickedCards] = useState([]);\n  useEffect(() => {\n    async function fetchImages() {\n      const urls = [];\n      for (let i = 0; i < 8; i++) {\n        const response = await fetch(\"https://picsum.photos/800\");\n        urls.push(response.url);\n      }\n      setRandomImages(urls);\n      setClickedCards(new Array(8).fill(false));\n    }\n    fetchImages();\n  }, []);\n  const handleCardClick = index => {\n    const newClickedCards = [...clickedCards];\n    newClickedCards[index] = true;\n    setClickedCards(newClickedCards);\n    const unclickedCards = randomImages.filter((_, i) => !clickedCards[i]);\n    const newRandomImages = [...randomImages];\n    unclickedCards.forEach((_, i) => {\n      const randomIndex = Math.floor(Math.random() * unclickedCards.length);\n      const newIndex = randomImages.indexOf(unclickedCards[randomIndex]);\n      newRandomImages[newIndex] = unclickedCards[i];\n      unclickedCards.splice(randomIndex, 1);\n    });\n    setRandomImages(newRandomImages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: randomImages.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n      image: image,\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1a6RJEmchdJpiRmWH8tvs5TqH10=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Card","jsxDEV","_jsxDEV","App","_s","randomImages","setRandomImages","clickedCards","setClickedCards","fetchImages","urls","i","response","fetch","push","url","Array","fill","handleCardClick","index","newClickedCards","unclickedCards","filter","_","newRandomImages","forEach","randomIndex","Math","floor","random","length","newIndex","indexOf","splice","className","children","map","image","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/antonio/repos/projectMemoryCardTOP/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\n\nfunction App() {\n  const [randomImages, setRandomImages] = useState([]);\n  const [clickedCards, setClickedCards] = useState([]);\n\n  useEffect(() => {\n    async function fetchImages() {\n      const urls = [];\n      for (let i = 0; i < 8; i++) {\n        const response = await fetch(\"https://picsum.photos/800\");\n        urls.push(response.url);\n      }\n      setRandomImages(urls);\n      setClickedCards(new Array(8).fill(false));\n    }\n\n    fetchImages();\n  }, []);\n\n  const handleCardClick = (index) => {\n    const newClickedCards = [...clickedCards];\n    newClickedCards[index] = true;\n    setClickedCards(newClickedCards);\n\n    const unclickedCards = randomImages.filter((_, i) => !clickedCards[i]);\n    const newRandomImages = [...randomImages];\n    unclickedCards.forEach((_, i) => {\n      const randomIndex = Math.floor(Math.random() * unclickedCards.length);\n      const newIndex = randomImages.indexOf(unclickedCards[randomIndex]);\n      newRandomImages[newIndex] = unclickedCards[i];\n      unclickedCards.splice(randomIndex, 1);\n    });\n    setRandomImages(newRandomImages);\n  };\n\n  return (\n    <div className=\"App\">\n      {randomImages.map((image, index) => (\n        <Card\n          key={index}\n          image={image}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,eAAeU,WAAWA,CAAA,EAAG;MAC3B,MAAMC,IAAI,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,CAAC;QACzDH,IAAI,CAACI,IAAI,CAACF,QAAQ,CAACG,GAAG,CAAC;MACzB;MACAT,eAAe,CAACI,IAAI,CAAC;MACrBF,eAAe,CAAC,IAAIQ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C;IAEAR,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,eAAe,GAAG,CAAC,GAAGb,YAAY,CAAC;IACzCa,eAAe,CAACD,KAAK,CAAC,GAAG,IAAI;IAC7BX,eAAe,CAACY,eAAe,CAAC;IAEhC,MAAMC,cAAc,GAAGhB,YAAY,CAACiB,MAAM,CAAC,CAACC,CAAC,EAAEZ,CAAC,KAAK,CAACJ,YAAY,CAACI,CAAC,CAAC,CAAC;IACtE,MAAMa,eAAe,GAAG,CAAC,GAAGnB,YAAY,CAAC;IACzCgB,cAAc,CAACI,OAAO,CAAC,CAACF,CAAC,EAAEZ,CAAC,KAAK;MAC/B,MAAMe,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGR,cAAc,CAACS,MAAM,CAAC;MACrE,MAAMC,QAAQ,GAAG1B,YAAY,CAAC2B,OAAO,CAACX,cAAc,CAACK,WAAW,CAAC,CAAC;MAClEF,eAAe,CAACO,QAAQ,CAAC,GAAGV,cAAc,CAACV,CAAC,CAAC;MAC7CU,cAAc,CAACY,MAAM,CAACP,WAAW,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC;IACFpB,eAAe,CAACkB,eAAe,CAAC;EAClC,CAAC;EAED,oBACEtB,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjB9B,YAAY,CAAC+B,GAAG,CAAC,CAACC,KAAK,EAAElB,KAAK,kBAC7BjB,OAAA,CAACF,IAAI;MAEHqC,KAAK,EAAEA,KAAM;MACbC,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAACC,KAAK;IAAE,GAFjCA,KAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAIb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAACtC,EAAA,CA7CQD,GAAG;AAAAwC,EAAA,GAAHxC,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}