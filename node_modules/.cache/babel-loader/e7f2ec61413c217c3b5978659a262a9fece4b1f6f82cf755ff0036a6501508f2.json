{"ast":null,"code":"var _jsxFileName = \"/home/antonio/repos/projectMemoryCardTOP/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport Header from \"./components/Header\";\nimport Points from \"./components/points\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchImages = async setRandomImages => {\n  const urls = [];\n  for (let i = 0; i < 8; i++) {\n    let randomPoke = Math.round(Math.random() * 899);\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${randomPoke}/`);\n    const data = await response.json();\n    urls.push({\n      url: data.sprites.front_default,\n      clicked: false\n    });\n  }\n  setRandomImages(urls);\n};\nfunction App() {\n  _s();\n  const [randomImages, setRandomImages] = useState(Array.from({\n    length: 8\n  }, () => ({\n    url: \"\",\n    clicked: false\n  })));\n  const [currentPoints, setCurrentPoints] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [consecutiveWins, setConsecutiveWins] = useState(0);\n  const [info, setInfo] = useState(\"Dont click twice on the same pokemon!\");\n  const handlePointsUpdate = newPoints => {\n    setCurrentPoints(newPoints);\n    if (newPoints > bestScore) {\n      setBestScore(newPoints);\n    }\n  };\n  useEffect(() => {\n    fetchImages(setRandomImages);\n  }, []);\n  const handleCardClick = index => {\n    if (randomImages[index].clicked) {\n      //if the clicked element property is already true game endend\n      const newImages = randomImages.map(image => ({\n        ...image,\n        clicked: false\n      }));\n      setRandomImages(newImages);\n      setCurrentPoints(0);\n      setConsecutiveWins(0);\n      setInfo(\"Same pokemon twice, you lose. Click again to start a new game.\");\n    } else {\n      //if the clicked element property is not true game continue\n      const newImages = randomImages.map((image, i) => {\n        //map over randomImages to find the clicked element and change his clicked property to true\n        if (i === index) {\n          return {\n            ...image,\n            clicked: true\n          };\n        }\n        return image;\n      });\n      const shuffledImages = [...newImages].sort(() => Math.random() - 0.5);\n      setRandomImages(shuffledImages);\n      handlePointsUpdate(currentPoints + 1);\n      if (currentPoints + 1 === 8) {\n        setInfo(\"Congratulations, you Win. Play with another set of pokemon!\");\n        fetchImages(setRandomImages);\n        setCurrentPoints(0);\n        let addConsecutive = consecutiveWins + 1;\n        setConsecutiveWins(addConsecutive);\n      } else {\n        setInfo(\"Good Job! Click another Pokemon!\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      info: info\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Points, {\n      currentPoints: currentPoints,\n      bestScore: bestScore,\n      consecutiveWins: consecutiveWins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardContainer\",\n      children: randomImages.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        image: image.url,\n        clicked: image.clicked,\n        onClick: () => handleCardClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6O3lkkk16rTNnzVWgSlnCtOmBiA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Card","Header","Points","jsxDEV","_jsxDEV","fetchImages","setRandomImages","urls","i","randomPoke","Math","round","random","response","fetch","data","json","push","url","sprites","front_default","clicked","App","_s","randomImages","Array","from","length","currentPoints","setCurrentPoints","bestScore","setBestScore","consecutiveWins","setConsecutiveWins","info","setInfo","handlePointsUpdate","newPoints","handleCardClick","index","newImages","map","image","shuffledImages","sort","addConsecutive","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/antonio/repos/projectMemoryCardTOP/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport Header from \"./components/Header\";\nimport Points from \"./components/points\";\n\nconst fetchImages = async (setRandomImages) => {\n  const urls = [];\n  for (let i = 0; i < 8; i++) {\n    let randomPoke = Math.round(Math.random() * 899);\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon/${randomPoke}/`\n    );\n    const data = await response.json();\n    urls.push({ url: data.sprites.front_default, clicked: false });\n  }\n  setRandomImages(urls);\n};\n\nfunction App() {\n  const [randomImages, setRandomImages] = useState(\n    Array.from({ length: 8 }, () => ({\n      url: \"\",\n      clicked: false,\n    }))\n  );\n  const [currentPoints, setCurrentPoints] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [consecutiveWins, setConsecutiveWins] = useState(0);\n  const [info, setInfo] = useState(\"Dont click twice on the same pokemon!\");\n\n  const handlePointsUpdate = (newPoints) => {\n    setCurrentPoints(newPoints);\n    if (newPoints > bestScore) {\n      setBestScore(newPoints);\n    }\n  };\n\n  useEffect(() => {\n    fetchImages(setRandomImages);\n  }, []);\n\n  const handleCardClick = (index) => {\n    if (randomImages[index].clicked) {\n      //if the clicked element property is already true game endend\n      const newImages = randomImages.map((image) => ({\n        ...image,\n        clicked: false,\n      }));\n      setRandomImages(newImages);\n      setCurrentPoints(0);\n      setConsecutiveWins(0);\n      setInfo(\"Same pokemon twice, you lose. Click again to start a new game.\");\n    } else {\n      //if the clicked element property is not true game continue\n      const newImages = randomImages.map((image, i) => {\n        //map over randomImages to find the clicked element and change his clicked property to true\n        if (i === index) {\n          return {\n            ...image,\n            clicked: true,\n          };\n        }\n        return image;\n      });\n      const shuffledImages = [...newImages].sort(() => Math.random() - 0.5);\n      setRandomImages(shuffledImages);\n      handlePointsUpdate(currentPoints + 1);\n      if (currentPoints + 1 === 8) {\n        setInfo(\"Congratulations, you Win. Play with another set of pokemon!\");\n        fetchImages(setRandomImages);\n        setCurrentPoints(0);\n        let addConsecutive = consecutiveWins + 1;\n        setConsecutiveWins(addConsecutive);\n      } else {\n        setInfo(\"Good Job! Click another Pokemon!\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header info={info} />\n      <Points\n        currentPoints={currentPoints}\n        bestScore={bestScore}\n        consecutiveWins={consecutiveWins}\n      />\n\n      <div className=\"CardContainer\">\n        {randomImages.map((image, index) => (\n          <Card\n            key={index}\n            image={image.url}\n            clicked={image.clicked}\n            onClick={() => handleCardClick(index)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,WAAW,GAAG,MAAOC,eAAe,IAAK;EAC7C,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;IAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qCAAoCL,UAAW,GAAE,CACnD;IACD,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCT,IAAI,CAACU,IAAI,CAAC;MAAEC,GAAG,EAAEH,IAAI,CAACI,OAAO,CAACC,aAAa;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EAChE;EACAf,eAAe,CAACC,IAAI,CAAC;AACvB,CAAC;AAED,SAASe,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAElB,eAAe,CAAC,GAAGR,QAAQ,CAC9C2B,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,OAAO;IAC/BT,GAAG,EAAE,EAAE;IACPG,OAAO,EAAE;EACX,CAAC,CAAC,CAAC,CACJ;EACD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACkC,eAAe,EAAEC,kBAAkB,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACoC,IAAI,EAAEC,OAAO,CAAC,GAAGrC,QAAQ,CAAC,uCAAuC,CAAC;EAEzE,MAAMsC,kBAAkB,GAAIC,SAAS,IAAK;IACxCR,gBAAgB,CAACQ,SAAS,CAAC;IAC3B,IAAIA,SAAS,GAAGP,SAAS,EAAE;MACzBC,YAAY,CAACM,SAAS,CAAC;IACzB;EACF,CAAC;EAEDtC,SAAS,CAAC,MAAM;IACdM,WAAW,CAACC,eAAe,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgC,eAAe,GAAIC,KAAK,IAAK;IACjC,IAAIf,YAAY,CAACe,KAAK,CAAC,CAAClB,OAAO,EAAE;MAC/B;MACA,MAAMmB,SAAS,GAAGhB,YAAY,CAACiB,GAAG,CAAEC,KAAK,KAAM;QAC7C,GAAGA,KAAK;QACRrB,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;MACHf,eAAe,CAACkC,SAAS,CAAC;MAC1BX,gBAAgB,CAAC,CAAC,CAAC;MACnBI,kBAAkB,CAAC,CAAC,CAAC;MACrBE,OAAO,CAAC,gEAAgE,CAAC;IAC3E,CAAC,MAAM;MACL;MACA,MAAMK,SAAS,GAAGhB,YAAY,CAACiB,GAAG,CAAC,CAACC,KAAK,EAAElC,CAAC,KAAK;QAC/C;QACA,IAAIA,CAAC,KAAK+B,KAAK,EAAE;UACf,OAAO;YACL,GAAGG,KAAK;YACRrB,OAAO,EAAE;UACX,CAAC;QACH;QACA,OAAOqB,KAAK;MACd,CAAC,CAAC;MACF,MAAMC,cAAc,GAAG,CAAC,GAAGH,SAAS,CAAC,CAACI,IAAI,CAAC,MAAMlC,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;MACrEN,eAAe,CAACqC,cAAc,CAAC;MAC/BP,kBAAkB,CAACR,aAAa,GAAG,CAAC,CAAC;MACrC,IAAIA,aAAa,GAAG,CAAC,KAAK,CAAC,EAAE;QAC3BO,OAAO,CAAC,6DAA6D,CAAC;QACtE9B,WAAW,CAACC,eAAe,CAAC;QAC5BuB,gBAAgB,CAAC,CAAC,CAAC;QACnB,IAAIgB,cAAc,GAAGb,eAAe,GAAG,CAAC;QACxCC,kBAAkB,CAACY,cAAc,CAAC;MACpC,CAAC,MAAM;QACLV,OAAO,CAAC,kCAAkC,CAAC;MAC7C;IACF;EACF,CAAC;EAED,oBACE/B,OAAA;IAAK0C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3C,OAAA,CAACH,MAAM;MAACiC,IAAI,EAAEA;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtB/C,OAAA,CAACF,MAAM;MACL0B,aAAa,EAAEA,aAAc;MAC7BE,SAAS,EAAEA,SAAU;MACrBE,eAAe,EAAEA;IAAgB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjC,eAEF/C,OAAA;MAAK0C,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3BvB,YAAY,CAACiB,GAAG,CAAC,CAACC,KAAK,EAAEH,KAAK,kBAC7BnC,OAAA,CAACJ,IAAI;QAEH0C,KAAK,EAAEA,KAAK,CAACxB,GAAI;QACjBG,OAAO,EAAEqB,KAAK,CAACrB,OAAQ;QACvB+B,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAACC,KAAK;MAAE,GAHjCA,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAKb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAAC5B,EAAA,CAlFQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAoFZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}